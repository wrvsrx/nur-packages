diff --git a/src/rime/engine.cc b/src/rime/engine.cc
index 07aa6b7d..7360e0b5 100644
--- a/src/rime/engine.cc
+++ b/src/rime/engine.cc
@@ -52,7 +52,6 @@ class ConcreteEngine : public Engine {
   vector<of<Filter>> filters_;
   vector<of<Formatter>> formatters_;
   vector<of<Processor>> post_processors_;
-  an<Switcher> switcher_;
 };
 
 // implementations
diff --git a/src/rime/engine.h b/src/rime/engine.h
index 2e1c8b81..94a6b500 100644
--- a/src/rime/engine.h
+++ b/src/rime/engine.h
@@ -16,6 +16,7 @@ namespace rime {
 class KeyEvent;
 class Schema;
 class Context;
+class Switcher;
 
 class Engine : public Messenger {
  public:
@@ -35,6 +36,7 @@ class Engine : public Messenger {
   void set_active_engine(Engine* engine = nullptr) { active_engine_ = engine; }
 
   RIME_API static Engine* Create();
+  an<Switcher> switcher_;
 
  protected:
   Engine();
diff --git a/src/rime/gear/ascii_composer.cc b/src/rime/gear/ascii_composer.cc
index 18889f3a..ef2e294c 100644
--- a/src/rime/gear/ascii_composer.cc
+++ b/src/rime/gear/ascii_composer.cc
@@ -12,6 +12,7 @@
 #include <rime/key_event.h>
 #include <rime/schema.h>
 #include <rime/gear/ascii_composer.h>
+#include <rime/switcher.h>
 
 namespace rime {
 
@@ -234,6 +235,13 @@ void AsciiComposer::SwitchAsciiMode(bool ascii_mode,
   }
   // refresh non-confirmed composition with new mode
   ctx->set_option("ascii_mode", ascii_mode);
+  auto switcher = this->engine_->switcher_;
+  if (switcher->IsAutoSave("ascii_mode")) {
+    if (Config* user_config = switcher->user_config()) {
+      user_config->SetBool("var/option/" + std::string("ascii_mode"),
+                           ascii_mode);
+    }
+  }
 }
 
 void AsciiComposer::OnContextUpdate(Context* ctx) {
@@ -241,6 +249,12 @@ void AsciiComposer::OnContextUpdate(Context* ctx) {
     connection_.disconnect();
     // quit temporary ascii mode
     ctx->set_option("ascii_mode", false);
+    auto switcher = this->engine_->switcher_;
+    if (switcher->IsAutoSave("ascii_mode")) {
+      if (Config* user_config = switcher->user_config()) {
+        user_config->SetBool("var/option/" + std::string("ascii_mode"), false);
+      }
+    }
   }
 }
 
diff --git a/src/rime/service.h b/src/rime/service.h
index 2b3111af..95ca87dc 100644
--- a/src/rime/service.h
+++ b/src/rime/service.h
@@ -44,11 +44,11 @@ class Session {
   Schema* schema() const;
   time_t last_active_time() const { return last_active_time_; }
   const string& commit_text() const { return commit_text_; }
+  the<Engine> engine_;
 
  private:
   void OnCommit(const string& commit_text);
 
-  the<Engine> engine_;
   time_t last_active_time_ = 0;
   string commit_text_;
 };
diff --git a/src/rime_api.cc b/src/rime_api.cc
index dd268863..ad52c883 100644
--- a/src/rime_api.cc
+++ b/src/rime_api.cc
@@ -20,6 +20,8 @@
 #include <rime/setup.h>
 #include <rime/signature.h>
 #include <rime/switches.h>
+#include <rime/engine.h>
+#include <rime/switcher.h>
 #include <rime_api.h>
 
 using namespace rime;
@@ -441,6 +443,13 @@ RIME_API void RimeSetOption(RimeSessionId session_id,
   if (!ctx)
     return;
   ctx->set_option(option, !!value);
+  auto engine = session->engine_.get();
+  auto switcher = engine->switcher_;
+  if (switcher->IsAutoSave(option)) {
+    if (Config* user_config = switcher->user_config()) {
+      user_config->SetBool("var/option/" + std::string(option), value);
+    }
+  }
 }
 
 RIME_API Bool RimeGetOption(RimeSessionId session_id, const char* option) {
